#include <some_library_exemple1>
#include <stdio.h>
#include <math.h>

// declaration d'objets globaux

int main (void)
{
  // corps du programme principal, très court
  return 0; // 0 pour succès, != 0 pour erreur
}

// double b = 0.0;
// println("Entrez b");
// scanf("%lf", &b);

// puts, similaire à println

gcc -std=c17 -Wall -o "poly2" "poly2.c" -lm

// int const double i = 1.0;

// sémantique : l'égal en C++ fait une copie ! (sémantique de valeur)

// on peut ajouter des modifiers "long" ou "short" aux types int
// ou unsigned (pour les int)

// portabilité : ne pas supposer que les char, int, etc. ont une taille fixe!
// on peut connaître leur taille avec limits.h
// -> on peut alors utiliser int8_t, uint8_t, int64_t, etc.

// chaque impression vaut quelque chose !
// donc on peut faire (même si bête) if (x = 3)

// on peut redéclarer une variable déjà déclarée (et on choisira celle
// qui a la portée la plus proche)
// à éviter

int f(void); // on DOIT mettre le void quand il n'y a pas d'arguments!
int f(double, double); // noms optionnels dans le proto mais c'est bien
// de les mettre

size_t const NB_CANTONS = 5;
int age[NB_CANTONS];

#include <stdio.h>

int main() {
    // Initialisation partielle d'un tableau avec la syntaxe C99
    double tablo[N] = { [2] = 0.5 }; // Le reste du tableau est initialisé à 0

    // Exemple d'initialisation d'un tableau avec des valeurs spécifiques
    int tab[MAX] = {
        1, 2, 3, 4, 5, // commence par faire : tab[0]=1, tab[1]=2, ...
        [MAX-5] = 9, 8, 7, 6 // puis : tab[MAX-5] = 9, tab[MAX-4] = 8, ...
                             // le reste est initialisé à 0
    };

    // Affichage du contenu du tableau pour MAX=6
    if (MAX == 6) {
        printf("tab contient: 1, 9, 8, 7, 6, 0\n");
    }

    // Affichage du contenu du tableau pour MAX=11
    if (MAX == 11) {
        printf("tab contient: 1, 2, 3, 4, 5, 0, 9, 8, 7, 6, 0\n");
    }

    return 0;
}

// règle absolue : on passe TOUJOURS la taille du tableau à la fonction avec 
// le tableau lui-même!
